name: CI Pipeline

# Trigger the workflow on Pull Requests and pushes to main
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

# Cancel in-progress workflows for the same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.12"
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  
jobs:
  # Job 1: Code Quality & Linting (Fast)
  lint:
    name: "🔍 Code Quality & Linting"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: "📥 Checkout code"
      uses: actions/checkout@v4
      
    - name: "🐍 Setup Python Environment"
      uses: ./.github/actions/setup-python
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: "🔍 Run all code quality checks"
      run: .github/scripts/check.sh

  # Job 2: Unit Tests (Fast) - Runs After Lint Passes
  unit-tests:
    name: "⚡ Unit Tests"
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 5
    
    steps:
    - name: "📥 Checkout code"
      uses: actions/checkout@v4
      
    - name: "🐍 Setup Python Environment"
      uses: ./.github/actions/setup-python
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: "🧪 Run unit tests with coverage"
      run: .github/scripts/test-unit.sh
          
    - name: "📊 Upload Results & Coverage"
      uses: ./.github/actions/upload-test-results
      with:
        test-type: unit
        upload-coverage: 'true'

  # Job 3: Integration Tests (Slower) - Runs After Unit Tests Pass
  integration-tests:
    name: "🏭 Integration Tests"
    runs-on: ubuntu-latest
    needs: unit-tests
    timeout-minutes: 10
    
    steps:
    - name: "📥 Checkout code"
      uses: actions/checkout@v4
      
    - name: "🐍 Setup Python Environment with Playwright"
      uses: ./.github/actions/setup-python
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        install-playwright: 'true'
        
    - name: "🧪 Run integration tests"
      run: .github/scripts/test-integration.sh
          
    - name: "📊 Upload Results & Artifacts"
      uses: ./.github/actions/upload-test-results
      with:
        test-type: integration
        upload-artifacts-on-failure: 'true'
        artifact-paths: |
          tests/integration/test_workspace/
          *.log

  # Job 4: Test Summary & Status Check - Runs After All Tests Complete
  test-summary:
    name: "📋 Test Summary"
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests]
    if: always()
    
    steps:
    - name: "✅ All tests passed"
      if: ${{ needs.lint.result == 'success' && needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' }}
      run: |
        echo "🎉 All CI checks passed successfully!"
        echo "✅ Code Quality: PASSED"
        echo "✅ Unit Tests: PASSED" 
        echo "✅ Integration Tests: PASSED"
        
    - name: "❌ Some tests failed"
      if: ${{ needs.lint.result != 'success' || needs.unit-tests.result != 'success' || needs.integration-tests.result != 'success' }}
      run: |
        echo "❌ Some CI checks failed!"
        echo "Code Quality: ${{ needs.lint.result }}"
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        exit 1

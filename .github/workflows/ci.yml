name: CI Pipeline

# Trigger the workflow on Pull Requests and pushes to main
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

# Cancel in-progress workflows for the same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.12"
  
jobs:
  # Job 1: Code Quality & Linting (Fast)
  lint:
    name: "🔍 Code Quality & Linting"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: "📥 Checkout code"
      uses: actions/checkout@v4
      
    - name: "🐍 Set up Python ${{ env.PYTHON_VERSION }}"
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: "📦 Cache pip dependencies"
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: "⚙️ Install dependencies"
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: "🔍 Run all code quality checks"
      run: .github/scripts/check.sh

  # Job 2: Unit Tests (Fast)
  unit-tests:
    name: "⚡ Unit Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: "📥 Checkout code"
      uses: actions/checkout@v4
      
    - name: "🐍 Set up Python ${{ env.PYTHON_VERSION }}"
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: "📦 Cache pip dependencies"
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: "⚙️ Install dependencies"
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: "🧪 Run unit tests with coverage"
      run: .github/scripts/test-unit.sh
          
    - name: "📊 Upload coverage reports to Codecov"
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./coverage.xml
        flags: unit-tests
        name: unit-tests-coverage
        
    - name: "📋 Upload unit test results"
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results
        path: unit-test-results.xml

  # Job 3: Integration Tests (Slower - needs Playwright)
  integration-tests:
    name: "🏭 Integration Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: "📥 Checkout code"
      uses: actions/checkout@v4
      
    - name: "🐍 Set up Python ${{ env.PYTHON_VERSION }}"
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: "📦 Cache pip dependencies"
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: "📦 Cache Playwright browsers"
      uses: actions/cache@v3
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-playwright-
          
    - name: "⚙️ Install Python dependencies"
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: "🎭 Install Playwright browsers"
      run: |
        playwright install chromium
        # Install system dependencies for headless browsers
        playwright install-deps chromium
        
    - name: "🧪 Run integration tests"
      env:
        # Ensure headless mode for CI
        PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright
      run: .github/scripts/test-integration.sh
          
    - name: "📋 Upload integration test results"
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: integration-test-results.xml
        
    - name: "📸 Upload test artifacts (on failure)"
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: test-artifacts
        path: |
          tests/integration/test_workspace/
          *.log

  # Job 4: Full Test Suite (All tests together for final validation)
  full-test-suite:
    name: "🧪 Full Test Suite"
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests]
    if: success()
    timeout-minutes: 45
    
    steps:
    - name: "📥 Checkout code"
      uses: actions/checkout@v4
      
    - name: "🐍 Set up Python ${{ env.PYTHON_VERSION }}"
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: "📦 Cache pip dependencies"
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: "📦 Cache Playwright browsers"
      uses: actions/cache@v3
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-playwright-
          
    - name: "⚙️ Install dependencies"
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        playwright install chromium
        playwright install-deps chromium
        
    - name: "🧪 Run complete test suite with coverage"
      env:
        PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright
      run: .github/scripts/test-all.sh
          
    - name: "📊 Upload full coverage report"
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./coverage.xml
        flags: full-tests
        name: full-test-coverage
        
    - name: "📋 Upload full test results"
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: full-test-results
        path: |
          test-results.xml
          htmlcov/

  # Job 5: Test Summary & Status Check
  test-summary:
    name: "📋 Test Summary"
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, full-test-suite]
    if: always()
    
    steps:
    - name: "✅ All tests passed"
      if: ${{ needs.lint.result == 'success' && needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.full-test-suite.result == 'success' }}
      run: |
        echo "🎉 All CI checks passed successfully!"
        echo "✅ Code Quality: PASSED"
        echo "✅ Unit Tests: PASSED" 
        echo "✅ Integration Tests: PASSED"
        echo "✅ Full Test Suite: PASSED"
        
    - name: "❌ Some tests failed"
      if: ${{ needs.lint.result != 'success' || needs.unit-tests.result != 'success' || needs.integration-tests.result != 'success' || needs.full-test-suite.result != 'success' }}
      run: |
        echo "❌ Some CI checks failed!"
        echo "Code Quality: ${{ needs.lint.result }}"
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        echo "Full Test Suite: ${{ needs.full-test-suite.result }}"
        exit 1
